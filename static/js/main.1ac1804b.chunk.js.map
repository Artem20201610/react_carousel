{"version":3,"sources":["components/Carousel.js","App.js","index.js"],"names":["Carousel","state","scrollLeft","images","showedLast","showedFirst","next","props","itemWidth","infinite","step","frameSize","maxScrollBy","checkFrameSize","scrollBy","setState","prev","carouselWidth","imagePerFrame","this","animationDuration","carouselStyle","width","height","overflow","carouselListStyle","transform","transitionDuration","imageStyle","className","style","map","image","key","src","alt","type","onClick","React","Component","defaultProps","App","changeSetting","inputValue","target","setting","value","newSetting","checked","length","defaultValue","min","max","onInput","input","ReactDOM","render","document","getElementById"],"mappings":"kOAKMA,G,wNACJC,MAAQ,CACNC,WAAY,EACZC,OAAQ,I,EAGVC,YAAa,E,EAEbC,aAAc,E,EAEdC,KAAO,WACL,MAAsC,EAAKC,MAAnCC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,SAAUC,EAA7B,EAA6BA,KACrBR,EAAe,EAAKD,MAApBC,WACFS,EAAc,EAAKJ,MAAnBI,UAKAC,EAJgB,EAAKX,MAAME,OAASK,EAILA,GAFrCG,EAAY,EAAKE,eAAeF,EAAWH,IAGvCM,EAAWZ,EAAcM,EAAYE,EAErCI,EAAWF,IACbE,EAAWF,EAEPH,IACE,EAAKL,YAAeF,IAAeU,GACrCE,EAAW,EACX,EAAKV,YAAa,GAElB,EAAKA,YAAa,IAKxB,EAAKW,SAAS,CACZb,WAAYY,K,EAIhBE,KAAO,WACL,MAAsC,EAAKT,MAAnCC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,SAAUC,EAA7B,EAA6BA,KACvBC,EAAc,EAAKJ,MAAnBI,UACAM,EAAgB,EAAKhB,MAAME,OAASK,EAE1CG,EAAY,EAAKE,eAAeF,EAAWH,GAE3C,IAAQN,EAAe,EAAKD,MAApBC,WACJY,EAAWZ,EAAcM,EAAYE,EAErCI,EAAW,IACbA,EAAW,EAEPL,IACE,EAAKJ,aAA+B,IAAfH,GACvBY,EAAWG,KAAkBf,EAAcM,EAAYG,GACvD,EAAKN,aAAc,GAEnB,EAAKA,aAAc,IAKzB,EAAKU,SAAS,CACZb,WAAYY,K,EAIhBD,eAAiB,SAACF,EAAWH,GAC3B,IAAIU,EAAgBP,EAYpB,OAVIH,GAAa,KAAOA,GAAa,IACnCU,EAAgB,EACPV,GAAa,IACtBU,EAAgB,EACPV,GAAa,MACtBU,EAAgBA,EAAgB,EAC5B,EACAA,GAGCA,G,4CAGT,WACE,MAAiDC,KAAKZ,MAA9CC,EAAR,EAAQA,UAAWL,EAAnB,EAAmBA,OAAQiB,EAA3B,EAA2BA,kBACrBT,EAAcQ,KAAKZ,MAAnBI,UACET,EAAeiB,KAAKlB,MAApBC,WAERS,EAAYQ,KAAKN,eAAeF,EAAWH,GAE3C,IAAMa,EAAgB,CACpBC,MAAM,GAAD,OAAKd,EAAYG,EAAjB,MACLY,OAAO,GAAD,OAAKf,EAAL,MACNgB,SAAS,UAELC,EAAoB,CACxBC,UAAU,eAAD,OAAiBxB,EAAjB,OACTyB,mBAAmB,GAAD,OAAKP,EAAL,OAEdQ,EAAa,CACjBL,OAAO,GAAD,OAAKf,EAAL,MACNc,MAAM,GAAD,OAAKd,EAAL,OAGP,OACE,oCACE,yBACEqB,UAAU,YAEV,wBACEA,UAAU,iBACVC,MAAOT,GAEP,yBACEQ,UAAU,wBACVC,MAAOL,GAENtB,EAAO4B,KAAI,SAAAC,GAAK,OACf,wBAAIC,IAAKD,GACP,yBACEE,IAAKF,EACLG,IAAKH,EACLF,MAAOF,WAOnB,4BACEQ,KAAK,SACLC,QAASlB,KAAKH,MAFhB,QAMA,4BACEoB,KAAK,SACLC,QAASlB,KAAKb,MAFhB,a,GAvIegC,IAAMC,YA2J7BvC,EAASwC,aAAe,CACtB9B,KAAM,EACNF,UAAW,IACXG,UAAW,EACXS,kBAAmB,IACnBX,UAAU,GAGGT,QC5BAyC,E,4MAtIbxC,MAAQ,CACNE,OAAQ,CACN,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,gBAEFO,KAAM,EACNC,UAAW,EACXH,UAAW,IACXY,kBAAmB,IACnBX,UAAU,G,EAGZiC,cAAgB,SAACC,EAAYC,EAAQC,GACnC,IAAIC,EAAQH,EACNI,EAAa,GAEH,aAAZF,IACFC,EAAQF,EAAOI,SAGjBD,EAAWF,GAAWC,EAEtB,EAAK/B,SAASgC,I,4CAGhB,WAAU,IAAD,OACC5C,EACNgB,KAAKlB,MADCE,OAGR,OACE,yBAAK0B,UAAU,OAEb,6CAAmB1B,EAAO8C,OAA1B,WAEA,kBAAC,EAAD,CACE9C,OAAQA,EACRM,SAAUU,KAAKlB,MAAMQ,SACrBW,kBAAmBD,KAAKlB,MAAMmB,kBAC9BV,KAAMS,KAAKlB,MAAMS,KACjBF,UAAWW,KAAKlB,MAAMO,UACtBG,UAAWQ,KAAKlB,MAAMU,YAExB,0BAAMkB,UAAU,QACd,2BAAOA,UAAU,gBAAjB,QAEE,2BACEO,KAAK,SACLc,aAAa,IACbC,IAAI,IACJC,IAAI,IACJC,QAAS,YAAiB,IAAdT,EAAa,EAAbA,OACNE,GAASF,EAAOE,MACdQ,EAAQV,GAETE,EAAQ,GAAOA,EAAQ,KAC1BA,EAAQ,EAAK7C,MAAMS,KACnB4C,EAAMR,MAAQ,EAAK7C,MAAMS,MAG3B,EAAKgC,cAAcI,EAAOF,EAAQ,YAIxC,2BAAOf,UAAU,gBAAjB,aAEE,2BACEO,KAAK,SACLc,aAAa,IACbC,IAAI,IACJC,IAAI,IACJC,QAAS,YAAiB,IAAdT,EAAa,EAAbA,OACNE,GAASF,EAAOE,MACdQ,EAAQV,GAETE,EAAQ,GAAOA,EAAQ,KAC1BA,EAAQ,EAAK7C,MAAMU,UACnB2C,EAAMR,MAAQ,EAAK7C,MAAMU,WAG3B,EAAK+B,cAAcI,EAAOF,EAAQ,iBAIxC,2BAAOf,UAAU,gBAAjB,aAEE,2BACEO,KAAK,SACLc,aAAa,MACbG,QAAS,YAAiB,IAAdT,EAAa,EAAbA,OACNE,GAASF,EAAOE,MAGhBA,EAAQ,OACVA,EAAQ,KAHIF,EAINE,MAAQ,MAGhB,EAAKJ,cAAcI,EAAOF,EAAQ,iBAIxC,2BAAOf,UAAU,gBAAjB,qBAEE,2BACEO,KAAK,SACLc,aAAa,OACbG,QAAS,YAAiB,IAAdT,EAAa,EAAbA,OACV,EAAKF,eAAeE,EAAOE,MAAOF,EAAQ,yBAIhD,2BAAOf,UAAU,gBAAjB,YAEE,2BACEO,KAAK,WACLiB,QAAS,YAAiB,IAAdT,EAAa,EAAbA,OACV,EAAKF,cAAcE,EAAOE,MAAOF,EAAQ,sB,GA7HvCN,IAAMC,WCDxBgB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.1ac1804b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Carousel.scss';\n\nclass Carousel extends React.Component {\n  state = {\n    scrollLeft: 0,\n    images: 10,\n  }\n\n  showedLast = false;\n\n  showedFirst = false;\n\n  next = () => {\n    const { itemWidth, infinite, step } = this.props;\n    const { scrollLeft } = this.state;\n    let { frameSize } = this.props;\n    const carouselWidth = this.state.images * itemWidth;\n\n    frameSize = this.checkFrameSize(frameSize, itemWidth);\n\n    const maxScrollBy = carouselWidth - (itemWidth * frameSize);\n    let scrollBy = scrollLeft + (itemWidth * step);\n\n    if (scrollBy > maxScrollBy) {\n      scrollBy = maxScrollBy;\n\n      if (infinite) {\n        if (this.showedLast || (scrollLeft === maxScrollBy)) {\n          scrollBy = 0;\n          this.showedLast = false;\n        } else {\n          this.showedLast = true;\n        }\n      }\n    }\n\n    this.setState({\n      scrollLeft: scrollBy,\n    });\n  }\n\n  prev = () => {\n    const { itemWidth, infinite, step } = this.props;\n    let { frameSize } = this.props;\n    const carouselWidth = this.state.images * itemWidth;\n\n    frameSize = this.checkFrameSize(frameSize, itemWidth);\n\n    const { scrollLeft } = this.state;\n    let scrollBy = scrollLeft - (itemWidth * step);\n\n    if (scrollBy < 0) {\n      scrollBy = 0;\n\n      if (infinite) {\n        if (this.showedFirst || (scrollLeft === 0)) {\n          scrollBy = carouselWidth - -(scrollLeft - (itemWidth * frameSize));\n          this.showedFirst = false;\n        } else {\n          this.showedFirst = true;\n        }\n      }\n    }\n\n    this.setState({\n      scrollLeft: scrollBy,\n    });\n  }\n\n  checkFrameSize = (frameSize, itemWidth) => {\n    let imagePerFrame = frameSize;\n\n    if (itemWidth >= 400 && itemWidth <= 599) {\n      imagePerFrame = 2;\n    } else if (itemWidth >= 600) {\n      imagePerFrame = 1;\n    } else if (itemWidth >= 260) {\n      imagePerFrame = imagePerFrame > 4\n        ? 4\n        : imagePerFrame;\n    }\n\n    return imagePerFrame;\n  }\n\n  render() {\n    const { itemWidth, images, animationDuration } = this.props;\n    let { frameSize } = this.props;\n    const { scrollLeft } = this.state;\n\n    frameSize = this.checkFrameSize(frameSize, itemWidth);\n\n    const carouselStyle = {\n      width: `${itemWidth * frameSize}px`,\n      height: `${itemWidth}px`,\n      overflow: `hidden`,\n    };\n    const carouselListStyle = {\n      transform: `translateX(-${scrollLeft}px)`,\n      transitionDuration: `${animationDuration}ms`,\n    };\n    const imageStyle = {\n      height: `${itemWidth}px`,\n      width: `${itemWidth}px`,\n    };\n\n    return (\n      <>\n        <div\n          className=\"Carousel\"\n        >\n          <ul\n            className=\"Carousel__list\"\n            style={carouselStyle}\n          >\n            <div\n              className=\"Carousel__list-scroll\"\n              style={carouselListStyle}\n            >\n              {images.map(image => (\n                <li key={image}>\n                  <img\n                    src={image}\n                    alt={image}\n                    style={imageStyle}\n                  />\n                </li>\n              ))}\n            </div>\n          </ul>\n        </div>\n        <button\n          type=\"button\"\n          onClick={this.prev}\n        >\n          Prev\n        </button>\n        <button\n          type=\"button\"\n          onClick={this.next}\n        >\n          Next\n        </button>\n      </>\n    );\n  }\n}\n\nCarousel.propTypes = {\n  step: PropTypes.number,\n  itemWidth: PropTypes.number,\n  frameSize: PropTypes.number,\n  animationDuration: PropTypes.number,\n  infinite: PropTypes.bool,\n  images: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nCarousel.defaultProps = {\n  step: 3,\n  itemWidth: 130,\n  frameSize: 3,\n  animationDuration: 1000,\n  infinite: false,\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\n\nimport Carousel from './components/Carousel';\n\nclass App extends React.Component {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  changeSetting = (inputValue, target, setting) => {\n    let value = inputValue;\n    const newSetting = {};\n\n    if (setting === 'infinite') {\n      value = target.checked;\n    }\n\n    newSetting[setting] = value;\n\n    this.setState(newSetting);\n  }\n\n  render() {\n    const { images }\n    = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1>Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          infinite={this.state.infinite}\n          animationDuration={this.state.animationDuration}\n          step={this.state.step}\n          itemWidth={this.state.itemWidth}\n          frameSize={this.state.frameSize}\n        />\n        <form className=\"form\">\n          <label className=\"form__inputs\">\n            step:\n            <input\n              type=\"number\"\n              defaultValue=\"3\"\n              min=\"1\"\n              max=\"5\"\n              onInput={({ target }) => {\n                let value = +target.value;\n                const input = target;\n\n                if ((value < 1) || (value > 5)) {\n                  value = this.state.step;\n                  input.value = this.state.step;\n                }\n\n                this.changeSetting(value, target, 'step');\n              }}\n            />\n          </label>\n          <label className=\"form__inputs\">\n            frameSize:\n            <input\n              type=\"number\"\n              defaultValue=\"3\"\n              min=\"1\"\n              max=\"5\"\n              onInput={({ target }) => {\n                let value = +target.value;\n                const input = target;\n\n                if ((value < 1) || (value > 5)) {\n                  value = this.state.frameSize;\n                  input.value = this.state.frameSize;\n                }\n\n                this.changeSetting(value, target, 'frameSize');\n              }}\n            />\n          </label>\n          <label className=\"form__inputs\">\n            itemWidth:\n            <input\n              type=\"number\"\n              defaultValue=\"130\"\n              onInput={({ target }) => {\n                let value = +target.value;\n                const input = target;\n\n                if (value > 1300) {\n                  value = 1300;\n                  input.value = 1300;\n                }\n\n                this.changeSetting(value, target, 'itemWidth');\n              }}\n            />\n          </label>\n          <label className=\"form__inputs\">\n            animationDuration:\n            <input\n              type=\"number\"\n              defaultValue=\"1000\"\n              onInput={({ target }) => {\n                this.changeSetting(+target.value, target, 'animationDuration');\n              }}\n            />\n          </label>\n          <label className=\"form__inputs\">\n            infinite:\n            <input\n              type=\"checkbox\"\n              onInput={({ target }) => {\n                this.changeSetting(target.value, target, 'infinite');\n              }}\n            />\n          </label>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}